start
  = exp:R {return exp; }

R "regexp"
  =  term:TERM exp:R {return {type:".", arg1: term, arg2: exp};}
  / term:TERM "|" exp:R {return {type:"|", arg1:term, arg2: exp}; }
  / term:TERM {return term; }
  

TERM
  =  term:ATOMICTERM "*" {return {type:"*", arg:term}; }
  / term:ATOMICTERM "+" {return {type:"+", arg:term}; }
  / term:ATOMICTERM "?" {return {type:"?", arg:term}; }
  / term:ATOMICTERM "{" exactly:NUM "}" {return {type:"repeat", arg:term, exactly:exactly}; }
  / term:ATOMICTERM "{" from:NUM "," to:NUM "}" {return {type:"repeat", arg:term, from:from, to:to}; }
  / term:ATOMICTERM "{" from:NUM ",}" {return {type:"repeat", arg:term, from:from, to:"infinity"}; }
  / term:ATOMICTERM {return term; }

ATOMICTERM
  =  "[^" set:SET+ "]" {return {type:"not-set", set:set}; }
  /  "[" set:SET+ "]" {return {type:"set", set:set}; }
  / "(" exp:R ")" { return {type:"group", group:exp}; }
  / alphanum:ALPHANUM {return alphanum; }
  / special:SPECIAL {return special;}
  / wildcard:"." {return {type:"wildcard"};}


ALPHANUM
  = char:[a-zA-Z0-9] { return {type: "literal", val:char}; }

ALLCHAR
  = ALPHANUM
  / char:[+\-!@#$%^&*():,.] {return {type:"literal", val:char};}

NUM
  = num:[0-9] { return num;}

SPECIAL
  = [\\] special:[\csSdDwWxOtnr] {return {type: "special", val:special}; }
  / [\\] escaped: [.*+?] {return {type: "escaped", val:escaped}; }

SET
  = start:[a-z] "-" end:[a-z]  { return {type:"range", from:start, to:end}; }
  / start:[A-Z] "-" end:[A-Z]  { return {type:"range", from:start, to:end}; }
  / start:[0-9] "-" end:[0-9]  { return {type:"range", from:start, to:end}; }
  / ALLCHAR
  / SPECIAL